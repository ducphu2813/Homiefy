version: '3.8'

volumes:
  travel_mongo_data: {}
  postgres_data: {}
  maven_cache: {}


services:

  mongo:
    image: mongo:latest
    ports:
      - "27018:27017"  # sử dụng cổng khác vì có 1 mongodb khác của đồ án dotnet(27017:27017)
    volumes:
      - travel_mongo_data:/data/db
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: password
    #restart: always  # phần này là tự động restart mỗi khi khởi dộng Docker(ko cần lắm trong giai đoạn dev)
    networks:
      - travel_network

  ##############
  # mongo express service
  mongo-express:
    image: mongo-express
    container_name: mongo-express
    depends_on:
      - mongo
    ports:
      - "8081:8081"
    environment:
      ME_CONFIG_MONGODB_SERVER: mongo
      ME_CONFIG_MONGODB_URL: "mongodb://admin:password@mongo:27017/"
      ME_CONFIG_MONGODB_ADMINUSERNAME: admin
      ME_CONFIG_MONGODB_ADMINPASSWORD: password
      ME_CONFIG_OPTIONS_EDITORTHEME: ambiance
      ME_CONFIG_BASICAUTH_USERNAME: admin
      ME_CONFIG_BASICAUTH_PASSWORD: password
    networks:
      - travel_network

  postgres:
    image: postgres:latest
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: 123456
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - travel_network

  #pgadmin
  pgadmin:
    image: dpage/pgadmin4
    container_name: pgadmin-container
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@example.com
      PGADMIN_DEFAULT_PASSWORD: admin_password
    ports:
      - "5050:80"
    depends_on:
      - postgres
    networks:
      - travel_network

  #service-registry
  service-registry:
    image: service-registry:latest    # image của Service Registry (nếu đã build image)
    container_name: service-registry  # tên của container
    build:
      context: ./ServiceRegistry      # đường dẫn tới Dockerfile
      dockerfile: Dockerfile          # tên file Dockerfile (nếu có dùng tên khác thì đổi)
    volumes:
      - maven_cache:/root/.m2         # sử dụng maven_cache build cho nhanh
    ports:
      - "8761:8761"                   # cổng mặc định của Eureka Server
    environment:
      - EUREKA_SERVER_PORT=8761       # biến môi trường để định nghĩa cổng của Eureka Server
    networks:
      - travel_network

  #api gateway
  apigateway:
    build:
      context: ./APIGateway
      dockerfile: Dockerfile
    volumes:
      - maven_cache:/root/.m2         # sử dụng maven_cache build cho nhanh
    ports:
      - "8080:8080"
    depends_on:
      - service-registry
    environment:
      - eureka.client.serviceUrl.defaultZone=http://service-registry:8761/eureka/
      - SERVER_PORT=8080
    networks:
      - travel_network

  #auth service
  travelauthservice:
    build:
      context: .
      dockerfile: Auth/Auth.API/Dockerfile
    volumes:
      - maven_cache:/root/.m2         # sử dụng maven_cache build cho nhanh
    ports:
      - "6001:8080"
    depends_on:
      - postgres
      - service-registry
    environment:
      - SPRING_DATASOURCE_URL=jdbc:postgresql://postgres:5432/authdb
      - eureka.client.serviceUrl.defaultZone=http://service-registry:8761/eureka/
    networks:
      - travel_network


  # service info
  travelserviceinfo:
    build:
      context: .
      dockerfile: ServiceInfo/ServiceInfo.API/Dockerfile
    volumes:
      - maven_cache:/root/.m2         # sử dụng maven_cache build cho nhanh
    ports:
      - "6002:8080"
    depends_on:
      - mongo
      - service-registry
    environment:
      - SPRING_DATA_MONGODB_URI=mongodb://admin:password@mongo:27017/sidb?authSource=admin
      - eureka.client.serviceUrl.defaultZone=http://service-registry:8761/eureka/
    networks:
      - travel_network


networks:
  travel_network:
    driver: bridge